class Environment:
    def __init__(self,lines_passenger_generator,num_buses=20):
        self.bus_capacity=20
        self.lines_passenger_generator=lines_passenger_generator
        self.num_buses=num_buses
        self.action_n=len(self.lines_passenger_generator.keys())+1
        self.line_gen_mean=np.concatenate([self.lines_passenger_generator[key] for key in self.lines_passenger_generator.keys()])
 
    def reset(self):
        self.steps_so_far=0
        self.buses_places=np.array([-1 for i in range(self.num_buses)])
        self.current_passengers=self.generate_passengers(self.line_gen_mean)
        self.line_seperators=[]
        start=0
        for key in self.lines_passenger_generator.keys():
            end=len(self.lines_passenger_generator[key])
            self.line_seperators.append((start,start+end))
            start=end
        return self.get_state()
    
    def get_state(self):
        return np.concatenate([self.current_passengers,self.buses_places])
    
    def move_buses(self):
        reward=-sum(self.current_passengers)
        for index in range(len(self.buses_places)):
            for start,end in self.line_seperators:
                if self.buses_places[index] >=start and self.buses_places[index]<end:
                    reward+= 3 * min(self.current_passengers[self.buses_places[index]],self.bus_capacity)
                    self.current_passengers[self.buses_places[index]]=max(self.current_passengers[self.buses_places[index]]-self.bus_capacity,0)
                    self.buses_places[index]+=1
                    if self.buses_places[index]==end:
                        self.buses_places[index]=-1
        return reward
    
    def step(self, action):
        if action<len(self.line_seperators):
            index=np.where(self.buses_places == -1)[0]
            if index.size != 0:
                self.buses_places[index[0]]=self.line_seperators[action][0]
        reward=self.move_buses()
        self.current_passengers+=self.generate_passengers(self.line_gen_mean)
        self.steps_so_far+=1
        return self.get_state(),reward,0,1 if self.steps_so_far>1000 else 0
    
    def generate_passengers(self,mean):
        sample=np.abs(np.random.randn()) + np.array(mean)
        return sample.astype(int)
    
lines_passenger_generator={'line_1':[1,2,3,3,1,3,4,4,3,4,2,1],'line_2':[6,7,4,3,8,9,7,6,8,9,8,3,4,4,9,9]}
env=Environment(lines_passenger_generator,15)
print(env.reset())
# print(env.step(2))
# print(env.step(1))
